# Hamiltonian 

def hamil(graph):
    V = len(graph)
    path = [-1] * V

    path[0]=0

    if not hamil_util(garph, path, 1):
        print('no sol')
        return False

    print(path)
    return True


def hamil_util(graph, path, pos):
    if pos == len(graph):
        if graph[paht[pos-1]][0] == 0:
            return True
        return False

    for v in range(1, len(graph)):
        if is_safe(graph, path, v, pos):
            path[pos] = v
            if hamil_util(graph, path, pos+1):
                return True
            path[pos] = -1
    return False

def is_safe(graph, path, v, pos):
    if v in path:
        return False
    
    if graph[path[pos-1]][v] == 0:
        return False

    return True





def gc(graph, n_colors):
    n = len(graph)
    colors = [0] * n 

    if not gcu(graph, colors, n_colors, 0):
        print(no sol)
        return False
    print(colors)
    return True

def gcu(graph, colors, n_colors, v):
    if v == len(graph):
        return True

    for color in range(1, n_colors+1):
        if is_safe(graph, n_colors, colors, v):
            colors[v) = color

            if gcu(graph, colors, n_colors, v+1):
                return True
            
            colors[v] = 0

    return False

def is_safe(graph, n_colors, colors, v):
    for i in range(len(graph)):
        if graph[v][i] == 1 and colors[i]==color:
            reutrn False
    return True



def djk(graph, start):
    V = len(graph)
    dist = [float(inf)] * V
    dist[start] = 0
    pq = [(0,start)]

    while pq:
        d, u = heapq.heapop()
        if d > dist[u]:
            continue
        for v, w in graph[u]:
            if dist[u]+w < dist[v]:
                dist[v] = dist[u]+w
                heapq.heappush(pq, dist[v], v)

    return dist





class Graph:
    def __init__(self, vertices):
        self.graph=deafulatdict(list)
        sel.fv =  V
    
    def added(self, u,v):
        self.graph[u].append(v)

    def tras(self):
        g = graph(slef.v)
        for i in self.g:
            for j in self.graph[i]:
                g.added(j,i)

        return garph

    def dfs_util(v, visited, scccomp):
        visited[v] = True
        scccomp.appned(v)
        for i in selv.grah[v]:
            if not visited[i]:
                self.dfs_util(i, visited, scc_component)
    
    def fillorder(v, visiteed, stakc):
        visited[v]= True
        for i in self.graph[v]:
            if not visited[i]:
                self.fillorder(i, visited, stakc)


        stakc.appned(v)

    def scc(slef):
    stakc = []
    visisted = [False] * self.V

    for i in range(self.v):
        if not vsiisted[i]:
            self.fillorder(i, visited, stack)

    gt =  self.gett()

    vsiisted = [False ]  * self.V
    scc = []

    while stack:
        i = stakc.pop()
        if not visited[i]:
            scc_component = []
            slef.dfs_util(i, visisted, scc_component)
            scc.appned(scccompn)
    returh scc


